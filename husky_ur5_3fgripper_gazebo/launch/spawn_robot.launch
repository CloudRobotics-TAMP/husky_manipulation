<?xml version="1.0"?>
<launch>

  <arg name="robot_namespace" 	default="/"	/>

  <arg name="x" 		default="0.0"	/>
  <arg name="y" 		default="0.0"	/>
  <arg name="z" 		default="0.0"	/>
  <arg name="yaw" 		default="0.0"	/>

  <arg name="laser_enabled" 	default="$(optenv HUSKY_LMS1XX_ENABLED false)"	/>
  <arg name="kinect_enabled" 	default="$(optenv HUSKY_UR5_ENABLED false)"	/>
  <arg name="urdf_extras" 	default="$(optenv HUSKY_URDF_EXTRAS)"		/>

  <group ns="$(arg robot_namespace)">

      	<!-- Husky control -->

  	<param name="robot_description" 	command="$(find xacro)/xacro '$(find husky_description)/urdf/husky.urdf.xacro'
    		--inorder
    		robot_namespace:=$(arg robot_namespace)
    		laser_enabled:=$(arg laser_enabled)
    		kinect_enabled:=$(arg kinect_enabled)
    		urdf_extras:=$(arg urdf_extras)
   	" />

      	<rosparam command="load" 		file="$(find husky_control)/config/control.yaml" 	/>

	<!-- Spawn controllers -->
  	<node name="base_controller_spawner" pkg="controller_manager" 	type="spawner"
        								args="husky_joint_publisher husky_velocity_controller"/>

  	<!-- Start EKF for localization -->
  	<node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    		<rosparam command="load" file="$(find husky_control)/config/localization.yaml" />
  	</node>

 

  	<!--node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen"/-->

 	<node name="husky_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  	<node pkg="twist_mux" type="twist_mux" name="twist_mux">
    		<rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    		<remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  	</node>

      	<!-- UR5 control -->
      
	<rosparam file="$(find ur_gazebo)/controller/joint_state_controller.yaml" 	command="load"	/>
      	<node name="joint_state_controller_spawner" 	pkg="controller_manager" 	type="controller_manager" 
											args="spawn joint_state_controller" 
											respawn="false" 
											output="screen"	/>
  

      	<rosparam file="$(find husky_ur5_3fgripper_gazebo)/config/control_ur5.yaml" 	command="load"	/>
      	<node name="arm_controller_spawner" 		pkg="controller_manager" 	type="controller_manager" 
											args="spawn ur_arm_controller" 
											respawn="false" 
											output="screen"	/>


      	<!-- 3F gripper control -->

      	<node pkg="robot_state_publisher" 		type="robot_state_publisher" 	name="gripper_state_publisher">
        	<param name="publish_frequency" 	type="double" 	value="50.0" 		/>
        	<remap to="/robotiq_hands/left_hand/joint_states" 	from="joint_states" 	/>
      	</node>
  	
	<group if="$(arg kinect_enabled)">

      		<!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
      	
		<node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

          		<remap from="cloud_in" 		to="camera/depth/points"/>
          		<remap from="scan" 		to="scan"/>
                        <rosparam>
                            target_frame: base_link # Leave empty to output scan in the pointcloud frame
                            tolerance: 1.0
                            min_height: 0.05
                            max_height: 1.0

                            angle_min: -0.52 # -30.0*M_PI/180.0
                            angle_max: 0.52 # 30.0*M_PI/180.0
                            angle_increment: 0.005 # M_PI/360.0
                            scan_time: 0.3333
                            range_min: 0.45
                            range_max: 4.0
                            use_inf: true

                            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
                            # 0 : Detect number of cores
                            # 1 : Single threaded
                            # 2->inf : Parallelism level
                            concurrency_level: 1
                        </rosparam>
      		</node>

   	</group>

    	<!-- Spawn robot in gazebo -->
    	<node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
        	args="	-x $(arg x)
              		-y $(arg y)
              		-z $(arg z)
              		-Y $(arg yaw)
              		-unpause
              		-urdf
              		-param robot_description
              		-model $(arg robot_namespace)" />

  </group>



</launch>
